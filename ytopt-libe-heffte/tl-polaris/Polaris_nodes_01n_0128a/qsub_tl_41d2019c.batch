#!/bin/bash -x
#PBS -l walltime=01:00:00
#PBS -l select=17:system=polaris
#PBS -l filesystems=home:grand:eagle
#PBS -A EE-ECP
#PBS -q prod

# Script output should indicate basic information
echo "$HOSTNAME";
date;
echo;

# Script to run libEnsemble using multiprocessing on launch nodes.
# Assumes Conda environment is set up.

# To be run with central job management
# - Manager and workers run on launch node.
# - Workers submit tasks to the nodes in the job available via scheduler (mpirun, aprun, etc) in plopper

# Name of calling script
export EXE="run_gctla_2a197c08.py"

# Communication Method
export COMMS="--comms local"

# Number of workers. For multiple nodes per worker, have nworkers be a divisor of nnodes, then add 1
# e.g. for 2 nodes per worker, set nnodes = 12, nworkers = 7
export NWORKERS="--nworkers 5"  # extra worker running generator (no resources needed)

export EVALS="--max-evals 30"

# ADJUST ENVIRONMENT

export IBV_FORK_SAFE=1; # May fix some MPI issues where processes call fork()


# Launch libE
pycommand="python $EXE $COMMS $NWORKERS --learner=RF $EVALS  --constraint-sys 4 --constraint-app 128 --input logs/PolarisSourceTasks/Polaris_01n_0128a/manager_results.csv logs/PolarisSourceTasks/Polaris_02n_0128a/manager_results.csv logs/PolarisSourceTasks/Polaris_04n_0128a/manager_results.csv logs/PolarisSourceTasks/Polaris_08n_0128a/manager_results.csv logs/PolarisSourceTasks/Polaris_16n_0128a/manager_results.csv --auto-budget=False --ignore logs/PolarisSourceTasks/Polaris_01n_0128a/manager_results.csv --predictions-only False --initial-quantile 0.8" # > out.txt 2>&1"
echo "$pycommand";
eval "$pycommand";
echo;
date;
echo;
